/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 * –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Product –∏ —Å–æ–∑–¥–∞–µ—Ç FilterOption –∑–∞–ø–∏—Å–∏
 *
 * –ó–∞–ø—É—Å–∫: pnpm tsx prisma/migrate-filters.ts
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function migrateFilters() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–æ–≤...\n')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const products = await prisma.product.findMany({
      select: {
        autoMark: true,
        engineModel: true,
        compressor: true,
      },
    })

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`)

    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const autoMarks = new Set<string>()
    const engineModels = new Set<string>()
    const compressors = new Set<string>()

    products.forEach((product) => {
      if (product.autoMark) autoMarks.add(product.autoMark)
      if (product.engineModel) engineModels.add(product.engineModel)
      if (product.compressor) compressors.add(product.compressor)
    })

    console.log(`\nüìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:`)
    console.log(`  - –ú–∞—Ä–∫–∏ –∞–≤—Ç–æ: ${autoMarks.size}`)
    console.log(`  - –ú–æ–¥–µ–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è: ${engineModels.size}`)
    console.log(`  - –¢–∏–ø—ã –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: ${compressors.size}`)

    // –°–æ–∑–¥–∞–µ–º FilterOption –∑–∞–ø–∏—Å–∏
    let created = 0
    let skipped = 0

    console.log(`\nüíæ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ FilterOption...`)

    // –ú–∞—Ä–∫–∏ –∞–≤—Ç–æ
    for (const value of autoMarks) {
      try {
        await (prisma as any).filterOption.create({
          data: {
            type: 'autoMark',
            value,
          },
        })
        created++
      } catch (error) {
        // –ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (unique constraint)
        skipped++
      }
    }

    // –ú–æ–¥–µ–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    for (const value of engineModels) {
      try {
        await (prisma as any).filterOption.create({
          data: {
            type: 'engineModel',
            value,
          },
        })
        created++
      } catch (error) {
        skipped++
      }
    }

    // –¢–∏–ø—ã –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞
    for (const value of compressors) {
      try {
        await (prisma as any).filterOption.create({
          data: {
            type: 'compressor',
            value,
          },
        })
        created++
      } catch (error) {
        skipped++
      }
    }

    console.log(`\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`)
    console.log(`  - –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${created}`)
    console.log(`  - –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): ${skipped}`)

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const filterOptions = await (prisma as any).filterOption.groupBy({
      by: ['type'],
      _count: {
        id: true,
      },
    })

    console.log(`\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FilterOption:`)
    filterOptions.forEach((fo: { type: string; _count: { id: number } }) => {
      const typeName =
        fo.type === 'autoMark' ? '–ú–∞—Ä–∫–∏ –∞–≤—Ç–æ' : fo.type === 'engineModel' ? '–ú–æ–¥–µ–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è' : '–¢–∏–ø—ã –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞'
      console.log(`  - ${typeName}: ${fo._count.id}`)
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

migrateFilters()
