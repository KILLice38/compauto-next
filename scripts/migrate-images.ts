#!/usr/bin/env tsx
/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 *
 * –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º –≤–º–µ—Å—Ç–æ –±–µ–ª–æ–≥–æ.
 * –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–æ —Å—Ç–∞—Ä–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—É—é.
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   pnpm tsx scripts/migrate-images.ts
 *
 * –û–ø—Ü–∏–∏:
 *   --dry-run  - –ü–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 *   --force    - –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
 */

import fs from 'fs/promises'
import path from 'path'
import sharp from 'sharp'
import { fileURLToPath } from 'url'
import { dirname } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

const UPLOADS_DIR = path.join(__dirname, '../public/uploads')
const PRODUCTS_DIR = path.join(UPLOADS_DIR, 'products')

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2)
const isDryRun = args.includes('--dry-run')
const isForce = args.includes('--force')

interface ImageVariants {
  source: string
  card: string
  detail: string
  thumb: string
}

async function regenerateVariants(sourceFilePath: string): Promise<void> {
  const buf = await fs.readFile(sourceFilePath)
  const baseWithoutExt = sourceFilePath.replace(/__source\.webp$/, '')

  const targets = [
    { suf: 'card', w: 260, h: 260 },
    { suf: 'detail', w: 460, h: 299 },
    { suf: 'thumb', w: 106, h: 69 },
  ] as const

  // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –≤–º–µ—Å—Ç–æ –±–µ–ª–æ–≥–æ
  const bg = { r: 255, g: 255, b: 255, alpha: 0 }

  for (const { suf, w, h } of targets) {
    const outPath = `${baseWithoutExt}__${suf}.webp`

    if (!isForce) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
      try {
        await fs.access(outPath)
        console.log(`  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ ${path.basename(outPath)} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`)
        continue
      } catch {
        // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
    }

    if (isDryRun) {
      console.log(`  üîÑ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω: ${path.basename(outPath)}`)
      continue
    }

    await sharp(buf).resize(w, h, { fit: 'contain', background: bg }).toFormat('webp', { quality: 82 }).toFile(outPath)

    console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω: ${path.basename(outPath)}`)
  }
}

async function findAllSourceImages(dir: string): Promise<string[]> {
  const sourceImages: string[] = []

  async function scan(currentDir: string) {
    try {
      const entries = await fs.readdir(currentDir, { withFileTypes: true })

      for (const entry of entries) {
        const fullPath = path.join(currentDir, entry.name)

        if (entry.isDirectory()) {
          await scan(fullPath)
        } else if (entry.isFile() && entry.name.endsWith('__source.webp')) {
          sourceImages.push(fullPath)
        }
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ${currentDir}:`, error)
    }
  }

  await scan(dir)
  return sourceImages
}

async function main() {
  console.log('\nüöÄ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
  console.log('‚îÅ'.repeat(60))

  if (isDryRun) {
    console.log('‚ö†Ô∏è  –†–ï–ñ–ò–ú –ü–†–û–ë–ù–û–ì–û –ü–†–û–ì–û–ù–ê (--dry-run)')
    console.log('   –§–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã\n')
  }

  if (isForce) {
    console.log('‚ö†Ô∏è  –†–ï–ñ–ò–ú –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –ü–ï–†–ï–ó–ê–ü–ò–°–ò (--force)')
    console.log('   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã\n')
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  try {
    await fs.access(PRODUCTS_DIR)
  } catch {
    console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${PRODUCTS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.')
    console.log('   –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n')
    process.exit(0)
  }

  console.log(`üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${PRODUCTS_DIR}\n`)

  const sourceImages = await findAllSourceImages(PRODUCTS_DIR)

  if (sourceImages.length === 0) {
    console.log('‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    console.log('   –í—Å–µ –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º.\n')
    process.exit(0)
  }

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${sourceImages.length} –∏—Å—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n`)

  let processed = 0
  let skipped = 0
  let failed = 0

  for (const sourceImage of sourceImages) {
    const relativePath = path.relative(PRODUCTS_DIR, sourceImage)
    console.log(`\nüñºÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞: ${relativePath}`)

    try {
      await regenerateVariants(sourceImage)
      processed++
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞:`, error)
      failed++
    }
  }

  console.log('\n' + '‚îÅ'.repeat(60))
  console.log('üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:')
  console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}`)
  console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`)
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${failed}`)

  if (isDryRun) {
    console.log('\nüí° –ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run')
  } else if (failed === 0) {
    console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    console.log('   –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω.')
  }

  console.log('')
}

main().catch((error) => {
  console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  process.exit(1)
})
